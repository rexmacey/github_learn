install.packages("glmnet")
ms-us<-3
path
PATH
library(rJava)
sessionInfo()
library(datasets)
data(iris)
?iris
str(iris)
?subset\
?subset
temp<-subset(iris,Species="virginica")
View(temp)
temp<-subset(iris,Species=="virginica")
View(temp)
View(temp)
mean(temp$Sepal.Length)
apply(iris,2,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
temp<-mtcars
View(temp)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
debug(ls)
ls()
q
quit
exit
end
q
debug()
?debug
undebug
undebug()
undebug(ls)
set.seed(1)
rpois(5, 2)
?dpois
?rnorm
pnorm(.68)
qnorm(.68)
pnorm(.83)
qnorm(.83)
qnorm(.84)
qnorm(.85)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?rpof
?Rprof
?system.time
require(stats)
system.time(for(i in 1:100) mad(runif(1000)))
?inv
message("hello")
cat("st")
?message
install.packages(c("C50", "caret", "ggplot2", "glmnet", "googleVis", "gss", "mnormt", "Rcpp", "Rglpk", "shiny", "yaml"))
library(fPortfolio)
datasets
dataSets
SMALLCAP
head(SMALLCAP)
str(SMALLCAP)
names(SMALLCAP)
names(GCCINDEX)
names(SPISECTOR)
head(SPISECTOR)
head(SPISECTOR.RET)
## ----echo=FALSE----------------------------------------------------------
#########################################################################
# Copyright (C) 2011-2014 Guy Yollin                                    #
# License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher #
#########################################################################
## ----include=FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(tidy=FALSE,cache=FALSE,size='scriptsize',
fig.path='figures/',fig.show='hide',fig.keep='last',
fig.align='center',	fig.width=7,	fig.height=5,
message=FALSE,warning=FALSE)
## ----echo=FALSE,cache=FALSE----------------------------------------------
options(width=81,continue=" ",digits=8)
## ------------------------------------------------------------------------
library(quantstrat)
search()
## ----echo=F,results='hide'-----------------------------------------------
suppressWarnings(try(rm(list=ls(FinancialInstrument:::.instrument),pos=FinancialInstrument:::.instrument),silent=TRUE))
## ------------------------------------------------------------------------
currency("USD")
stock("SPY",currency="USD",multiplier=1)
ls(envir=FinancialInstrument:::.instrument)
?ls
ls(all=T)
## ------------------------------------------------------------------------
# system settings
initDate <- '1997-12-31'
startDate <- '1998-01-01'
endDate <-  '2014-06-30'
initEq <- 1e6
## ------------------------------------------------------------------------
Sys.setenv(TZ="UTC")
## ----echo=FALSE,results='hide'-------------------------------------------
if(file.exists("SPY.RData"))
{
load("SPY.RData")
} else {
getSymbols('SPY', from=startDate, to=endDate, index.class="POSIXct", adjust=T)
save(list="SPY",file="SPY.RData")
}
?getSymbols
if(file.exists("SPY.RData"))
{
load("SPY.RData")
} else {
getSymbols('SPY', from=startDate, to=endDate, index.class="POSIXct", adjust=T,auto.assign=T)
save(list="SPY",file="SPY.RData")
}
?to.monthly
?SMA
?Cl
?initPortf
args(initOrders)
args(strategy)
?strategy
?addRule
?add.rule
?checkBlotterUpdate
?checkBlotterUpdate
??checkBlotterUpdate
?assign
?checkBlotterUpdate
??checkBlotterUpdate
library(xts)
library(PortfolioAnalytics)
library(timeSeries)
returns.ts<-SPISECTOR.RET
n.assets<-dim(returns.ts)[2]
estcov<-covEstimator(returns.ts)
cov.mat<-estcov$Sigma
pspec<-NULL
pspec<-portfolio.spec(assets=colnames(returns.ts))
pspec <- add.constraint(pspec, type="full_investment")
pspec <- add.constraint(pspec, type="long_only")
pspec <- add.objective(pspec,type="return",name="mean")
ep<-create.EfficientFrontier(returns.ts,pspec,type="mean-sd",n.portfolios=50)
pspec<-NULL
pspec<-portfolio.spec(assets=colnames(returns.ts))
returns.ts<-SPISECTOR.RET
library(fPortfolio)
returns.ts<-SPISECTOR.RET
save(returns.ts,file="SPISECTOR.rdata")
load("SPISECTOR.rdata")
n.assets<-dim(returns.ts)[2]
estcov<-covEstimator(returns.ts)
cov.mat<-estcov$Sigma
setwd("~/Quant Trading/github_learn")
